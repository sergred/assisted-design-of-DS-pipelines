from pathlib import Path
import traceback
import logging
import json
import time
import sys


FEATURE_ORDER = ['PCASkewnessFirstPC', 'PCAKurtosisFirstPC'
,'PCAFractionOfComponentsFor95PercentVariance', 'Landmark1NN'
,'LandmarkRandomNodeLearner', 'LandmarkDecisionNodeLearner'
,'LandmarkDecisionTree', 'LandmarkNaiveBayes', 'LandmarkLDA', 'ClassEntropy'
,'SkewnessSTD', 'SkewnessMean', 'SkewnessMax', 'SkewnessMin', 'KurtosisSTD'
,'KurtosisMean', 'KurtosisMax', 'KurtosisMin', 'SymbolsSum', 'SymbolsSTD'
,'SymbolsMean', 'SymbolsMax', 'SymbolsMin', 'ClassProbabilitySTD'
,'ClassProbabilityMean', 'ClassProbabilityMax', 'ClassProbabilityMin'
,'InverseDatasetRatio', 'DatasetRatio', 'RatioNominalToNumerical'
,'RatioNumericalToNominal', 'NumberOfCategoricalFeatures'
,'NumberOfNumericFeatures', 'NumberOfMissingValues'
,'NumberOfFeaturesWithMissingValues', 'NumberOfInstancesWithMissingValues'
,'NumberOfFeatures', 'NumberOfClasses', 'NumberOfInstances'
,'LogInverseDatasetRatio', 'LogDatasetRatio', 'PercentageOfMissingValues'
,'PercentageOfFeaturesWithMissingValues'
,'PercentageOfInstancesWithMissingValues', 'LogNumberOfFeatures'
,'LogNumberOfInstances']

# Duplicate, third-party dependencies, or otherwise failing flows
FLOWS_TO_REMOVE = [
 5994,5982,5979,6055,6663,5993,6058,6967,6678,6679,6015,5987,6059,6057,6223,6060
,6645,5986,5990,5992,5991,6108,5981,5987,6111,6021,6327,6223,5984,7116,6235,5981
,5979,6015,7819,5986,6262,6326,5983,6967,6070,5979,5987,6057,6055,6059,5983,6223
,6058,7819,6060,6246,6262,5986,6111,6663,6223,7116,5981,6111,6967,7819,6223,6327
,6326,6021,6235,6010,5981,5992,6967,6223,6262,6246,6015,5990,5982,6645,6070,5984
,6108,6679,5987,5993,5983,5986,6678,5991,5979,5994,6663,6645,6663,6246,5983,5981
,5992,6678,5982,5991,5994,6679,5986,6246,6645,5983,6223,6663,6108,5990,5993,6010
,6645,6058,6235,5984,7120,7116,6967,6070,5983,6663,5987,6060,7819,6057,5981,6014
,5979,6055,6059,6223,6015,6111,5983,6326,5986,6235,5981,5979,6021,6223,5984,5987
,7819,6015,6327,6262,6967,5993,7089,5991,7778,6952,6070,7096,5982,6015,5987,6969
,5992,6010,5994,6108,5990,6679,5979,7707,6946,7116,5983,5986,6645,6970,7819,6246
,6678,6967,6113,5987,6967,6060,7819,6057,6223,6059,6070,6055,6058,5979,6967,7819
,6246,7116,5983,6014,7120,6058,6060,5979,6223,6235,5987,6057,7819,6246,6059,5984
,6055,6070,5981,6015,5983,6967,6113,6946,6326,6327,5987,6223,5981,7819,5984,5979
,6021,5983,7116,6015,6235,7778,7819,6010,6678,5991,5993,6967,6679,5982,5994,5986
,6246,6015,6645,6108,5979,5990,6070,5992,5983,6645,6967,5992,6946,5986,6010,5981
,6246,5994,6070,5987,5990,5979,5993,6679,6015,6663,6108,6223,5982,5991,6678,6969
,6946,6970,7089,7096,6967,7707,6952,7116,6113,6946,7116,6967,5982,8660,6223,6221
,5773,6061,6327,5983,6246,7120,6663,5987,6645,6055,5981,5994,6663,6070,5982,5983
,6678,6010,6679,6246,6015,5986,5987,6223,6645,5990,5991,5993,6108,5981,5992,5979
,6952,7089,7707,6967,7116,6970,6969,7096,6946,6946,6113,5984,6967,7819,6235,5986
,6021,5979,5987,5983,6015,6326,5981,6327,6262,6223,7819,7707,6970,7116,6952,6969
,7089,6946,7096,6946,7819,6113,5983,7096,5979,7819,7707,7089,6060,6969,6246,6059
,5987,6055,6223,6058,6970,6070,6952,7116,6057,6967,6946,7819,5981,5983,6663,6223
,6113,6645,5987,7096,6969,6967,6946,6952,7089,6970,7116,6113,7707,7819,6946,6055
,6946,6970,6059,7819,7116,5992,6058,6678,5987,5982,6223,5993,5979,7707,5991,5986
,6015,6952,7096,6108,7089,6967,6057,5983,6070,6645,5994,6010,5990,6246,6060,6969
,6679,7819,7116,5983,6946,6246,6967,6663,6246,6645,5981,6678,5991,6015,5993,5994
,6223,5983,5992,5979,6967,5990,6946,6108,6010,6946,5987,5982,5986,6070,6679,7819
,7010,6946,6113,7819,7707,7096,6969,6967,6952,7116,7089,6246,6946,6970,5983,7010
,7096,7116,6969,7707,7089,7010,7819,6970,6952,6946,5987,5981,5983,5979,5984,7819
,6967,6326,6021,6223,6946,6015,6235,6327,7116,7116,7010,6946,5981,5986,6223,7089
,7707,5992,5990,5983,6679,7096,5982,6946,6663,6070,6108,5994,6015,5987,5979,6969
,5991,6678,6010,6967,7116,6246,6645,6970,5993,6952,7819,6946,7778,6946,6946,7116
,6967,7819,7010,7116,6946,6946,6967,7010,7819,5983,7116,6246,7819,6060,7116,6070
,7819,6967,6246,6057,5983,6055,5987,5979,6223,6059,6058,5983,6246,6967,7819,6223
,6060,6946,6057,5979,5987,6058,6070,6059,6055,6113,6946,7116,6967,5984,6645,7116
,5987,5979,7120,6223,5983,6070,6663,6014,6235,6015,5981,7089,5983,7116,5987,5981
,6223,6679,6010,6223,5981,5982,5990,6108,5991,5987,6663,5994,5993,5983,6246,5992
,6946,6015,5979,6678,5986,6645,6070,6113,5768,5819,7089,7707,6969,7116,6970,7778
,5773,5762,6952,6946,5702,5769,7096,7819,7116,6967,7819,7116,7010,6111,5979,7819
,7707,6969,7096,6058,5984,5983,6059,6970,6946,7116,6070,6262,6223,6967,6015,5981
,6055,6060,7089,6057,6952,5986,5987,8468,8466,8568,8512,7817,8479,8512,8538,8479
,8512,8479,7817,8512,8479,7817,8568,8479,8466,8482,8512,8468,7817,8479,8512,8482
,8479,8466,8568,8468,8512,7817,8468,8482,8479,8512,8568,8466,7817,8468,8568,8482
,8479,8512,7817,8466,8568,7817,8482,8466,8512,8479,8468,8479,8512,8512,8479,8482
,8479,8512,8538,7817,8479,8479,8512,8512,8479,8479,8512,8512,8538,8533,8479,8512
,8479,8479,8512,8512,8482,8466,8468,8479,8568,7817,8512,8479,8538,8512,7817,8479
,8533,7817,8512,7817,8479,8466,8468,8512,8538,8482,8533,8568,8479,8466,8468,7817
,8482,8468,8466,8568,8512,7817,8479,8512,8538,8479,8512,8479,7817,8512,8479,7817
,8568,8479,8466,8482,8512,8468,7817,8479,8512,8482,8479,8466,8568,8468,8512,7817
,8468,8482,8479,8512,8568,8466,7817,8468,8568,8482,8479,8512,7817,8466,8568,7817
,8482,8466,8512,8479,8468,8479,8512,8512,8479,8482,8479,8512,8538,7817,8479,8479
,8512,8512,8479,8479,8512,8512,8538,8533,8479,8512,8479,8479,8512,8512,8482,8466
,8468,8479,8568,7817,8512,8479,8538,8512,7817,8479,8533,7817,8512,7817,8479,8466
,8468,8512,8538,8482,8533,8568,8479,8466,8468,7817,8482,8512,8568,8512,7817,8538
,8479,8538,8533,8479,7817,8512,8512,8479,8516,8479,8479,8512,8466,8479,8468,8512
,8568,8516,8482,7817,7817,8512,8538,8479,8512,8479,8882,8882,18150,18189,17719
,17865]

base = Path('intermediates/')


def get_logger(filename):
    Path(filename).touch()
    logging.captureWarnings(True)
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    handler = logging.FileHandler(filename)
    handler.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s:%(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger


def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        print('%r took %2.2f ms' % (method.__name__, (te - ts) * 1000))
        return result
    return timed


def repeat_on_failure(method):
    def timed(*args, **kw):
        repeat = True
        count = 0
        while repeat:
            try:
                result = method(*args, **kw)
                repeat = False
            except:
                count += 1
                print(f"#{count}", traceback.format_exc().splitlines()[-1])
                time.sleep(60)
        return result
    return timed


def pass_on_failure(method):
    def timed(*args, **kw):
        try:
            result = method(*args, **kw)
        except KeyboardInterrupt:
            sys.exit(0)
        except:
            result = None
            traceback.print_exc()
        return result
    return timed
